####################################################################################
DETAILS OF SDN PROJECT
####################################################################################

Explaining what I did so far:

1) ODL took me quite some time to get the hang of especially with compilation of builds and program execution. Finally,
  I have sorted these issues and none of us should run into it as it will waste nearly 6 hours of your time easily.

  I have uploaded a code which does the following for a controller:

1) It acts as a learning switch. The concept is same as what we did in floodlight controller, except here we don't
  handle FLOW_MOD messages and neither do I see any coming from the switch. So it is relatively easier infact.

2) Apart from that, I have put a small check to do the following:

--> If a controller finds that a source host has connected (pinged) more than 2 hosts, then the controller will ask 
  the switch to disconnect from current controller and talk to another one. This is done by using 
  Java's Runtime.runTime().exec("$cmd"), where $cmd is the command to execute eg. 

Process p = Runtime.runTime().exec("ifconfig")

The above will execute "ifconfig" on the command line. Similarly, we can do Runtime.runTime().exec("ovs-vsctl 
del-controller s1") to ensure switch s1's controller is deleted from its configuration. Same goes for 
reconfiguring the switch and making it talk to another controller.

The failover happens successfully when code was tested. Switch goes down for some period as it takes around 5-6 seconds
to failover to next controller.

####################################################################################
TASKS FOR EACH PERSON
####################################################################################
Nachiket
####################################################################################
Implement an application that does the following (better to get done in Java) [REC-A]:

1) Every 10 seconds, pull the topology from the child controller. We should pull topology that includes switch nodes,
  and links. The API is defined in testapiconnector.py on the SDN-Project folder in github already. The same API 
  construction can be used in JAVA, and this would take a few more lines of code.

2) Once the topology is pulled from child controller, we will relay this across to parent controller. Check if the 
  same information obtained from the child controller can plainly be pushed into controller. Verification needs to be 
  done on the parent controller to check if this information passed from child to parent controller is actually 
  existant. The verification can be done by executing a simple GET request with REST API to parent controller to 
  pull and see if same information exists.

TESTING:

Test the application by running two ODL controllers on two VMs or VM and PC. Keep one as parent and other as child.

####################################################################################
Sareena
####################################################################################
Implement an application that does the following (Java) [REC-A]:

A management application which is basically a class that has member functions within it. application must do the 
following:

--> Child controller will call this function whenever it finds that a host from its handled network is trying to reach 
the other network. (Don't implement this)
--> The function will accept (sourceMac of host, destMac of host) and the switch it is connected to. We will pass these
  as arguments from controller.
--> When this application function gets called, it will do a REST API and pull the topology the parent controller has.
--> The pulled topology will now be parsed to check if we have the destMac of host in other network in this graph. 
  If so, we must tell return the value of the port on which the switch needs to send the flow out. The return is 
  done back to controller that made the function call.

TESTING:

Since you don't know the arguments called, you can create the application and manually enter the mac and switch 
values to see if you are able to do the check on the pulled topology from the parent controller. Note that this 
will only talk to the parent controller as this application belongs to the respective child controller.

* WE USE REST API only *

####################################################################################
Shruti
####################################################################################
Implement an application that does the following (Java) [REGION OPTIMIZATION]:

--> Implement the logic for region optimization.
--> The logic should perform the following:

--> Every 10 seconds, we use REST API to query the topology from child controller. At same time, we also query 
  parent controller for the topology. (REASON WILL BE EXPLAINED)
--> From the pulled topology of child controller, we can see if a host or hosts have left the switches in that 
  controller.
--> From the parent's topology we can verify if the host that left is now in the other network.
--> If the mac or IP of the host that left, matches the host that joined on other network, then we can 
  increment a counter.
--> If counter exceeds a threshold, say 5 we will execute the commands to failover switch to other controller

When the condition is satisfied, instead of implementing the command just put,
System.out.println("More than 5 hosts have moved from our network to other side, hence performing failover");

That print statement will be substituted later with the switch over commands. :)

The reason I asked to query the parent controller is also because, parent controller will also get notified with 
the new topology on other side. The code for which Nachi is writing. When the new topology comes out there, we can 
compare.

* WE USE REST API only *

####################################################################################
Avinash
####################################################################################

I will work on all of these little at a time and contribute my suggestions and code to speed things. If you have 
doubts, let any of us know and we will try to help.

####################################################################################
Please see Build and Compile instructions in build_compile.txt for procedure to build the files
####################################################################################

